swagger: "2.0"
info:
  description: IriusRisk provides this featured API to allow for deeper customer integrations as well as enable very flexible automations within the many varied environments IriusRisk needs to operate.
  version: 1.29.0
  title: IriusRisk API
  termsOfService: The Terms of Service are delivered with the Commercial License.
  contact:
    name: IriusRisk
    url: https://enterprise-support.iriusrisk.com/
  license:
    name: IriusRisk Commercial
    url: https://iriusrisk.com/threat-modeling-tool
host: demo.iriusrisk.com
schemes:
- https
consumes:
- application/json
produces:
- application/json
security:
- api_token: []
paths:
  /health:
    get:
      summary: Returns application status
      description: |
        Public non-versioned endpoint that can be reached anonymously.
        It will return a 200 OK if all essential services are up and running, and 500 if any of them are not reachable or working as expected.
      parameters: []
      security:
      - {}
      responses:
        "200":
          description: The system is online and available
          schema:
            $ref: '#/definitions/Health'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    head:
      summary: Returns application status
      description: |
        Public unversioned endpoint that can be reached anonymously.
        It will return a 200 OK if everything is up to date and 500 if it found an error somewhere.
      parameters: []
      security:
      - {}
      responses:
        "200":
          description: The system is online and available
          headers:
            X-Application-Context:
              type: string
              description: the name for the deployed application that this context belongs to
            Content-Type:
              type: string
              description: the original media type of the resource
            Transfer-Encoding:
              type: string
              description: the form of encoding used to safely transfer the payload body to the user.
            Date:
              type: string
              description: represent a single moment in time in the platform by GTM format
        default:
          description: Health unexpected error
          headers:
            Content-Type:
              type: string
              description: the original media type of the resource
            Transfer-Encoding:
              type: string
              description: the form of encoding used to safely transfer the payload body to the user.
            Connection:
              type: string
              description: status connection
  /health/db:
    get:
      summary: Returns connection status between the server and the database.
      description: |
        Returns connection status between the server and the database.
        Public unversioned endpoint that can be reached anonymously.
        It will return a 200 if the connection status is OK and 500 if KO.
      parameters: []
      security:
      - {}
      responses:
        "200":
          description: The connection status between the server and the database is online and available.
          schema:
            $ref: '#/definitions/HealthDb'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /health/ai:
    get:
      summary: Returns connection status between the server and the AI service.
      description: |
        Returns connection status between the server and the AI service.
        Public unversioned endpoint that can be reached anonymously.
        It will return a 200 if the connection status is OK and 500 if KO.
      parameters: []
      security:
      - {}
      responses:
        "200":
          description: The connection status between the server and the AI service is online and available.
          schema:
            $ref: '#/definitions/HealthAI'
        "500":
          description: The connection status between the server and the AI service is unavailable.
          schema:
            $ref: '#/definitions/HealthAI'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /api/v1/roles:
    post:
      tags:
      - Roles
      summary: Creates a new role
      description: |
        Creates a new role.
        Conditions to be able to perform the action:
         - To have the permission **ROLES_UPDATE** granted.
      parameters:
      - in: body
        name: createRoleBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: Name of the new role
            permissions:
              type: array
              description: Role's permissions list
              items:
                type: string
      responses:
        "201":
          description: Created role
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ROLES_UPDATE
  /api/v1/roles/{role-id}:
    delete:
      tags:
      - Roles
      summary: Deletes an existing role
      description: |
        Deletes an existing role.
        Conditions to be able to perform the action:
        - To have the permission **ROLES_UPDATE** granted.
      parameters:
      - name: role-id
        in: path
        description: Name of the role to delete
        required: true
        type: string
        format: string
      responses:
        "204":
          description: Role has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ROLES_UPDATE
  /api/v1/groups:
    get:
      tags:
      - Groups
      summary: Gets a list of all groups
      description: |
        Deprecated in favour of [/api/v1/businessunits](#Business_Units/getBusinessUnits)
        Gets a list of all user's groups.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      parameters: []
      deprecated: true
      responses:
        "200":
          description: An array of groups
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
    post:
      tags:
      - Groups
      summary: Creates a new user group
      description: |
        Deprecated in favour of [/api/v1/businessunits](#Business_Units/createBusinessUnits)
        Creates a new user group.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      parameters:
      - in: body
        name: createUserGroupBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      deprecated: true
      responses:
        "201":
          description: Group details
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
  /api/v1/groups/{group-id}:
    get:
      tags:
      - Groups
      summary: Gets the group details.
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}](#Business_Units/getBusinessUnit)
        Returns the group details for the requested group.
        Conditions to be able to perform the action:
           - If the caller has the PRODUCTS_LIST_ALL permission then all groups can be queried without restriction.
           - Without the PRODUCTS_LIST_ALL permission, the call will only return the group if the caller belongs to that group.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      deprecated: true
      responses:
        "200":
          description: Group details
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCTS_LIST_ALL
    put:
      tags:
      - Groups
      summary: Update a users group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}](#Business_Units/updateBusinessUnits)
        Updates a users group.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      parameters:
      - name: group-id
        in: path
        description: Unique ID of the group
        required: true
        type: string
        format: string
      - in: body
        name: updateUsersGroupBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      deprecated: true
      responses:
        "204":
          description: Group has been updated
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
    delete:
      tags:
      - Groups
      summary: Deletes a users group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}](#Business_Units/deleteBusinessUnits)
        Deletes a users group.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      deprecated: true
      responses:
        "204":
          description: Group has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
  /api/v1/audit/events:
    get:
      tags:
      - Audit Log
      summary: Retrieve the list of audit events that match a provided filter
      description: |
        Retrieve the list of audit events that match a provided filter.
        List users who belongs to a group.
        Conditions to be able to perform the action:
         - Users that only have the permission **USER_AUDIT_LOG_VIEW** will only be able to list their own audit log events.
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**.
      parameters:
      - name: max
        in: query
        description: maximum number of items returned
        required: false
        type: integer
        default: 10
        minimum: 1
        format: int32
      - name: offset
        in: query
        description: index of the first element to return
        required: false
        type: integer
        default: 0
        minimum: 0
        format: int32
      - name: filter
        in: query
        description: "The full filter string must be passed in a single **filter** query parameter. Providing multiple **filter** \nparameters will lead to unexpected results.\n\nBoth the properties and values must be enclosed in single quotation marks.\n| Operator | Description | Example |\n| -------- | ----------- |-------- |\n| =        | Returns items where the property **equals** to the value | /resources?filter=**'field'='value'** |\n| <>       | Returns items where the property is **not equal** to the value     | /resources?filter=**'field'<>'value'** |\n| >        | Returns items where the property is **bigger<sup>1</sup>** than the value   | /resources?filter=**'field'>'value'** |\n| <        | Returns items where the property is **smaller<sup>1</sup>** than the value  | /resources?filter=**'field'<'value'** |\n| >=       | Returns items where the property is **bigger<sup>1</sup> or equal** to the value      | /resources?filter=**'field'>='value'** |\n| <=       | Returns items where the property is **smaller<sup>1</sup> or equal** to the value     | /resources?filter=**'field'<='value'** |\n| ~        | Returns items where the string property **contains, ignorecase**, the value  | /resources?filter=**'field'~'alue'** |\n| :AND:    | Returns items that comply with **both** filters                | /resources?filter=**'field1'='value1':AND:'field2'<>'value2'** |\n| :OR:     | Returns items that comply with **at least one** of the filters | /resources?filter=**'field1'='value1':OR:'field2'<>'value2'** |\n\nBigger and smaller according to normal sorting. Applicable to: dates, timestamps, numbers, strings.\n\nThe following data types support filtering:\n- Boolean\n- String\n- Enumerations\n- Numeric\n- Dates\n- Timestamps\n\n**AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example:\nfilter=('field1'='value1':OR:'field2'='value2'):AND:('field3'<>'value3':OR:'field4'='value4')\n"
        required: false
        type: array
        items:
          type: string
        collectionFormat: multi
      responses:
        "200":
          description: "The response will contain all the audit events that match the filter, and which affect resources or users that the authenticated user has access to."
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_AUDIT_LOG_VIEW
      - USER_AUDIT_LOG_VIEW
  /api/v1/groups/{group-id}/users:
    get:
      tags:
      - Groups
      - Users
      summary: List users from a group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}/users](#Business_Units/getBusinessUnitsUsers)
        List users who belongs to a group.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a group, **if you belong to this group**.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      deprecated: true
      responses:
        "200":
          description: An array of users who belongs to the group
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
    put:
      tags:
      - Groups
      - Users
      summary: Assigns users to a group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}/users](#Business_Units/updateBusinessUnitsUsers)
        Assigns users to a group.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a group, **if you belong to this group**.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      - in: body
        name: assignUsersToGroupBody
        description: Object that contains information to assign users to group
        required: true
        schema:
          type: object
          properties:
            usernames:
              type: array
              description: List of users to assign to group
              items:
                type: string
      deprecated: true
      responses:
        "201":
          description: An array of users that have been assigned to group
          schema:
            type: object
            properties:
              group:
                type: string
              usernames:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
    delete:
      tags:
      - Groups
      - Users
      summary: Unassign a list of users from a group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}/users](#Business_Units/deleteBusinessUnitsUsers)
        Unassign a list of users from a group.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a group, **if you belong to this group**.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      - in: body
        name: unassignUsersFromGroupBody
        description: Object that contains information to unassign users from group
        required: true
        schema:
          type: object
          properties:
            usernames:
              type: array
              description: List of usernames of users to be unassigned from a group
              items:
                type: string
      deprecated: true
      responses:
        "204":
          description: All users have been unassigned
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/groups/{group-id}/users/{user-id}:
    delete:
      tags:
      - Groups
      - Users
      summary: Removes a user from a group
      description: |
        Deprecated in favour of [/api/v1/businessunits/{businessunit-id}/users](#Business_Units/deleteBusinessUnitsUser)
        Unassign a user from a group.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a group, **if you belong to this group**.
      parameters:
      - name: group-id
        in: path
        description: Name of the group
        required: true
        type: string
        format: string
      - name: user-id
        in: path
        description: Username of the user to be removed from group
        required: true
        type: string
        format: string
      deprecated: true
      responses:
        "204":
          description: User has been removed from group
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/businessunits:
    get:
      tags:
      - Business Units
      summary: Gets a list of all business units
      description: |
        Gets a list of all user's business units.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      operationId: getBusinessUnits
      parameters: []
      responses:
        "200":
          description: An array of business units
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
    post:
      tags:
      - Business Units
      summary: Creates a new user business unit
      description: |
        Creates a new user business unit.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      operationId: createBusinessUnits
      parameters:
      - in: body
        name: createUserBusinessUnitBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      responses:
        "201":
          description: Business Unit details
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
  /api/v1/businessunits/{businessunit-id}:
    get:
      tags:
      - Business Units
      summary: Gets the business unit details.
      description: |
        Returns the business unit details for the requested business unit.
        Conditions to be able to perform the action:
           - If the caller has the PRODUCTS_LIST_ALL permission then all business units can be queried without restriction.
           - Without the PRODUCTS_LIST_ALL permission, the call will only return the business unit if the caller belongs to that business unit.
      operationId: getBusinessUnitsDetails
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      responses:
        "200":
          description: Business unit details
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCTS_LIST_ALL
    put:
      tags:
      - Business Units
      summary: Update a users business unit
      description: |
        Updates a users business unit.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      operationId: updateBusinessUnits
      parameters:
      - name: businessunit-id
        in: path
        description: Unique ID of the business unit
        required: true
        type: string
        format: string
      - in: body
        name: updateUserBusinessUnitBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      responses:
        "204":
          description: Business unit has been updated
          schema:
            $ref: '#/definitions/Group'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
    delete:
      tags:
      - Business Units
      summary: Deletes a users business unit
      description: |
        Deletes a users business unit.
        Conditions to be able to perform the action:
           - To have the permission **ALL_USERS_UPDATE** granted.
      operationId: deleteBusinessUnits
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      responses:
        "204":
          description: Business unit has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
  /api/v1/businessunits/{businessunit-id}/users:
    get:
      tags:
      - Business Units
      - Users
      summary: List users from a business unit
      description: |
        List users who belongs to a business unit.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to list users of a business unit, **if you belong to this business unit**.
      operationId: getBusinessUnitsUsers
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      responses:
        "200":
          description: An array of users who belongs to the business unit
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
    put:
      tags:
      - Business Units
      - Users
      summary: Assigns users to a business unit
      description: |
        Assigns users to a business unit.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to assign users to a business unit, **if you belong to this business unit**.
      operationId: updateBusinessUnitsUsers
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      - in: body
        name: assignUsersToBusinessUnitBody
        description: Object that contains information to assign users to business unit
        required: true
        schema:
          type: object
          properties:
            usernames:
              type: array
              description: List of users to assign to business unit
              items:
                type: string
      responses:
        "201":
          description: An array of users that have been assigned to business unit
          schema:
            type: object
            properties:
              group:
                type: string
              usernames:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
    delete:
      tags:
      - Business Units
      - Users
      summary: Unassign a list of users from a business unit
      description: |
        Unassign a list of users from a business unit.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign users from a business unit, **if you belong to this business unit**.
      operationId: deleteBusinessUnitsUsers
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      - in: body
        name: unassignUsersFromBusinessUnitBody
        description: Object that contains information to unassign users from business unit
        required: true
        schema:
          type: object
          properties:
            usernames:
              type: array
              description: List of usernames of users to be unassigned from a business unit
              items:
                type: string
      responses:
        "204":
          description: All users have been unassigned
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/businessunits/{businessunit-id}/users/{user-id}:
    delete:
      tags:
      - Business Units
      - Users
      summary: Removes a user from a business unit
      description: |
        Unassign a user from a business unit.
        Conditions to be able to perform the action:
         - To have the permission **ALL_USERS_UPDATE** granted, or
         - To have the permission **MANAGE_USERS_BU** granted. With this permission you will be able to unassign user from a business unit, **if you belong to this business unit**.
      operationId: deleteBusinessUnitsUser
      parameters:
      - name: businessunit-id
        in: path
        description: Name of the business unit
        required: true
        type: string
        format: string
      - name: user-id
        in: path
        description: Username of the user to be removed from business unit
        required: true
        type: string
        format: string
      responses:
        "204":
          description: User has been removed from business unit
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/libraries:
    get:
      tags:
      - Libraries
      summary: Gets a list of all libraries.
      description: |
        Gets a list of all risk pattern libraries.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_VIEW** granted or
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: max
        in: query
        description: maximum number of items returned
        required: false
        type: integer
        default: 100
        format: int32
      - name: index
        in: query
        description: index of the first element to return
        required: false
        type: integer
        default: 1
        format: int32
      responses:
        "200":
          description: An array of libraries
          schema:
            type: array
            items:
              $ref: '#/definitions/LibraryShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_VIEW
      - LIBRARY_UPDATE
    post:
      tags:
      - Libraries
      summary: Creates a Library
      description: |
        Creates a new empty Library.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - in: body
        name: createLibraryBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      responses:
        "201":
          description: Empty Library created
          schema:
            $ref: '#/definitions/Library'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}:
    get:
      tags:
      - Libraries
      summary: Gets library details
      description: |
        Gets the library details.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      responses:
        "200":
          description: Library details
          schema:
            $ref: '#/definitions/Library'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
    delete:
      tags:
      - Libraries
      summary: Deletes a Library
      description: |
        Deletes a library.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      responses:
        "204":
          description: The library has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns:
    post:
      tags:
      - Libraries
      - Risk Patterns
      summary: Creates new Risk Pattern
      description: |
        Creates new Risk Pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - in: body
        name: createRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
            tags:
              type: array
              description: List of tags
              items:
                type: string
      responses:
        "201":
          description: Risk Pattern details
          schema:
            $ref: '#/definitions/RiskPattern'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}:
    get:
      tags:
      - Libraries
      - Risk Patterns
      summary: Gets Risk Pattern details
      description: |
        Gets Risk Pattern details.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      responses:
        "200":
          description: RiskPattern details
          schema:
            $ref: '#/definitions/RiskPattern'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
    delete:
      tags:
      - Libraries
      - Risk Patterns
      summary: Deletes a Risk Pattern
      description: |
        Deletes a Risk Pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      responses:
        "204":
          description: The risk pattern has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/usecases:
    post:
      tags:
      - Libraries
      - Use Cases
      summary: Creates new use case in a library.
      description: |
        Creates new use case in a library.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - in: body
        name: createUseCaseInLibraryBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
      responses:
        "201":
          description: UseCase details
          schema:
            $ref: '#/definitions/LibraryUseCase'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/usecases/{use-case-id}/threats:
    post:
      tags:
      - Libraries
      - Threats
      summary: Creates a new threat in a library.
      description: |
        Creates a new threat in a library.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - in: body
        name: createThreatInLibraryBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
            riskRating:
              type: object
              description: Risk Rating
              properties:
                confidentiality:
                  type: string
                  description: Confidentiality
                  enum:
                  - none
                  - low
                  - medium
                  - high
                  - very-high
                integrity:
                  type: string
                  description: Integrity
                  enum:
                  - none
                  - low
                  - medium
                  - high
                  - very-high
                availability:
                  type: string
                  description: Availability
                  enum:
                  - none
                  - low
                  - medium
                  - high
                  - very-high
                easeOfExploitation:
                  type: string
                  description: Ease Of Exploitation
                  enum:
                  - none
                  - low
                  - medium
                  - high
                  - very-high
      responses:
        "201":
          description: Threat details
          schema:
            $ref: '#/definitions/LibraryThreat'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/weaknesses:
    post:
      tags:
      - Libraries
      - Risk Patterns
      - Weaknesses
      summary: Creates a new weakness in a risk pattern
      description: |
        Creates a new Weakness in a risk pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - in: body
        name: createWeaknessInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Reference field value
            name:
              type: string
              description: Name field value
            desc:
              type: string
              description: Description field value
            impact:
              type: string
              description: Impact
              enum:
              - none
              - low
              - medium
              - high
              - very-high
            test:
              $ref: '#/definitions/TestCommand'
      responses:
        "201":
          description: Weakness details
          schema:
            $ref: '#/definitions/LibraryWeakness'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/countermeasures:
    post:
      tags:
      - Libraries
      - Risk Patterns
      - Countermeasures
      summary: Creates new countermeasure in a risk pattern
      description: |
        Creates new countermeasure in a risk pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - in: body
        name: createCountermeasureInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          $ref: '#/definitions/ControlCommand'
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/LibraryControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/usecases/{use-case-id}/threats/{threat-id}/weaknesses:
    put:
      tags:
      - Libraries
      - Risk Patterns
      - Use Cases
      - Threats
      - Weaknesses
      summary: Associates weakness to a threat in a risk pattern.
      description: |
        Associates weakness to a threat in a risk pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - in: body
        name: associateWeaknessToThreatInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Existing Weakness reference
      responses:
        "201":
          description: Weakness details
          schema:
            $ref: '#/definitions/LibraryWeakness'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  ? /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/usecases/{use-case-id}/threats/{threat-id}/weaknesses/{weakness-id}/countermeasures
  : put:
      tags:
      - Libraries
      - Risk Patterns
      - Use Cases
      - Threats
      - Weaknesses
      - Countermeasures
      summary: Associates a countermeasure to a weakness in a risk pattern.
      description: |
        Associates a countermeasure to a weakness in a risk pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - name: weakness-id
        in: path
        description: Unique ID of the weakness
        required: true
        type: string
      - in: body
        name: associateCountermeasureToWeaknessInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Existing Countermesasure reference
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/LibraryControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/libraries/{library-id}/riskpatterns/{risk-pattern-id}/usecases/{use-case-id}/threats/{threat-id}/countermeasures:
    put:
      tags:
      - Libraries
      - Use Cases
      - Threats
      - Countermeasures
      summary: Associates a countermeasure to a threat in a risk pattern.
      description: |
        Associates a countermeasure to a threat in a risk pattern.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: library-id
        in: path
        description: Unique ID of the library
        required: true
        type: string
      - name: risk-pattern-id
        in: path
        description: Unique ID of the risk pattern
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - in: body
        name: associateCountermeasureToThreatInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Existing Countermeasure reference
            mitigation:
              type: integer
              description: Mitigation
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/LibraryControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/security-content/countermeasures/{countermeasure-id}/standards:
    post:
      tags:
      - Libraries
      - Countermeasures
      - Standard
      summary: Associates a standard to a countermeasure.
      description: |
        Associates a standard to a countermeasure.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: countermeasure-id
        in: path
        description: Reference of the countermeasure
        required: true
        type: string
      - in: body
        name: associateStandardToCountermeasureInRiskPatternBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: array
          items:
            type: object
            properties:
              standardRef:
                type: string
                description: Existing Standard reference
              reference:
                type: string
                description: Reference name for the association
      responses:
        "201":
          description: Association has been created
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/security-content/countermeasures/{countermeasure-id}/standards/{standard-id}/references/{reference}:
    delete:
      tags:
      - Libraries
      - Countermeasures
      - Standard
      summary: Deletes the association between a standard and a countermeasure.
      description: |
        Deletes the association between a standard and a countermeasure.
        Conditions to be able to perform the action:
          - To have the permission **LIBRARY_UPDATE** granted.
      parameters:
      - name: countermeasure-id
        in: path
        description: Reference of the countermeasure
        required: true
        type: string
      - name: standard-id
        in: path
        description: Reference of the standard
        required: true
        type: string
      - name: reference
        in: path
        description: Name of the reference
        required: true
        type: string
      responses:
        "204":
          description: The association between a standard and a countermeasure has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/security-content/countermeasures/{countermeasure-id}/customfields:
    post:
      tags:
      - Libraries
      - Countermeasures
      - Custom fields
      summary: Update the value of one or more custom fields for all the countermeasures in Risk Pattern Libraries with a given id
      description: |
        Update the value of one or more custom fields for all the countermeasures in Risk Pattern Libraries with a given id.
        Conditions to be able to perform the action (both are required):
          - To have the permision **LIBRARY_UPDATE** granted.
          - To have permission to update each custom field.
      parameters:
      - name: countermeasure-id
        in: path
        description: Reference of the countermeasure
        required: true
        type: string
      - in: body
        name: customFields
        description: "List of custom fields to be updated. Just the custom fields types DATE, TEXT and TEXTAREA are currently supported."
        required: true
        schema:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique ID of the custom field
              value:
                type: string
                description: New value of the custom field. In case the custom field is of type date the accepted format will be "yyyy-mm-dd". Example -> "2021-02-20"
      responses:
        "200":
          description: Countermeasure custom fields updated
          schema:
            type: array
            items:
              $ref: '#/definitions/Udt'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/security-content/components:
    get:
      tags:
      - Components
      summary: Lists all component definitions
      description: |
        Returns a list of all component definitions ordered by name.
        Conditions to be able to perform the action:
          - To have the permission **COMPONENT_DEFINITIONS_VIEW** granted, or,
          - To have the permission **COMPONENT_DEFINITIONS_UPDATE** granted.
      parameters:
      - name: max
        in: query
        description: maximum number of items returned
        required: false
        type: integer
        default: 10
        minimum: 1
        format: int32
      - name: offset
        in: query
        description: index of the first element to return
        required: false
        type: integer
        default: 0
        minimum: 0
        format: int32
      responses:
        "200":
          description: An array of component definitions
          schema:
            type: array
            items:
              $ref: '#/definitions/SecurityContentComponent'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COMPONENT_DEFINITIONS_VIEW
      - COMPONENT_DEFINITIONS_UPDATE
    post:
      tags:
      - Components
      summary: Creates a new component definition
      description: |
        Creates a new component definition and its category if it doesn't exist.
        Conditions to be able to perform the action:
          - To have the permission **COMPONENT_DEFINITIONS_UPDATE** granted
      parameters:
      - in: body
        name: createComponentDefinitionBody
        description: Object that contains information to create new component definition
        required: true
        schema:
          type: object
          required:
          - category
          - name
          - ref
          properties:
            ref:
              type: string
              description: Unique identifier of the component definition
            name:
              type: string
              description: Name of the component definition
            desc:
              type: string
              description: Description of the component definition
            visible:
              type: boolean
              description: "Visibility of the component definition on the diagram. When false, the component will not be available on the diagram's palette but it will remain visible when already in use."
            category:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category of the component definition
              required:
              - name
            riskPatterns:
              type: array
              items:
                type: object
                properties:
                  libraryRef:
                    type: string
                    description: Reference of the library containing the risk pattern
                  ref:
                    type: string
                    description: Reference of the risk pattern
                required:
                - libraryRef
                - ref
      responses:
        "201":
          description: Component definition details
          schema:
            $ref: '#/definitions/SecurityContentComponent'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COMPONENT_DEFINITIONS_UPDATE
  /api/v1/security-content/components/{component-id}:
    get:
      tags:
      - Components
      summary: Gets the component definition details
      description: |
        Returns the component definition details.
        Conditions to be able to perform the action:
          - To have the permission **COMPONENT_DEFINITIONS_VIEW** granted, or,
          - To have the permission **COMPONENT_DEFINITONS_UPDATE** granted.
      parameters:
      - name: component-id
        in: path
        description: Unique identifier of the component definition
        required: true
        type: string
      responses:
        "200":
          description: The component definitions details
          schema:
            $ref: '#/definitions/SecurityContentComponent'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COMPONENT_DEFINITIONS_VIEW
      - COMPONENT_DEFINITONS_UPDATE
    put:
      tags:
      - Components
      summary: Updates the component definition details
      description: |
        Updates the component definition details and creates its category if it doesn't exist.
        The provided list of risk patterns replaces the previous list.
        Conditions to be able to perform the action:
          - To have the permission **COMPONENT_DEFINITONS_UPDATE** granted
      parameters:
      - name: component-id
        in: path
        description: Unique identifier of the component definition
        required: true
        type: string
      - in: body
        name: updateComponentDefinitionBody
        description: Object that contains information to update the component definition
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
              description: Name of the component definition
            desc:
              type: string
              description: Description of the component definition
            visible:
              type: boolean
              description: "Visibility of the component definition on the diagram. When false, the component will not be available on the diagram's palette but it will remain visible when already in use."
            category:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the category of the component definition
              required:
              - name
            riskPatterns:
              type: array
              items:
                type: object
                properties:
                  libraryRef:
                    type: string
                    description: Reference of the library containing the risk pattern
                  ref:
                    type: string
                    description: Reference of the risk pattern
                required:
                - libraryRef
                - ref
      responses:
        "200":
          description: The component definitions details
          schema:
            $ref: '#/definitions/SecurityContentComponent'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COMPONENT_DEFINITONS_UPDATE
    delete:
      tags:
      - Components
      summary: Deletes the component definition
      description: |
        Deletes the component definition.
        Conditions to be able to perform the action:
          - To have the permission **COMPONENT_DEFINITIONS_UPDATE** granted
      parameters:
      - name: component-id
        in: path
        description: Unique identifier of the component definition
        required: true
        type: string
      responses:
        "204":
          description: Component has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COMPONENT_DEFINITIONS_UPDATE
  /api/v1/security-content/threats/{threat-id}/customfields:
    post:
      tags:
      - Libraries
      - Threats
      - Custom fields
      summary: Update the custom field value for all the threats present at Risk Pattern Libraries with the indicated ref.
      description: |
        Update the value of one or more custom fields for all the threats in Risk Pattern Libraries with a given id.
        Conditions to be able to perform the action (both are required):
          - To have the permission **LIBRARY_UPDATE** granted.
          - To have permission to update each custom field.
      parameters:
      - name: threat-id
        in: path
        description: Reference of the threat
        required: true
        type: string
      - in: body
        name: customFields
        description: "List of custom fields to be updated. Just the custom fields types DATE, TEXT and TEXTAREA are currently supported."
        required: true
        schema:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique ID of the custom field
              value:
                type: string
                description: New value of the custom field. In case the custom field is of type date the accepted format will be "dd-mm-yyyy". Example -> "01-02-2021"
      responses:
        "200":
          description: Threat custom fields updated
          schema:
            type: array
            items:
              $ref: '#/definitions/Udt'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - LIBRARY_UPDATE
  /api/v1/products:
    get:
      tags:
      - Products
      summary: Gets a list of all products.
      description: |
        Gets a list of all products visible by the user who perform the call.
        Conditions to be able to perform the action:
          - No permissions are required to perform this action.
      parameters:
      - name: max
        in: query
        description: maximum number of items returned
        required: false
        type: integer
        default: 1
        format: int32
      - name: index
        in: query
        description: index of the first element to return
        required: false
        type: integer
        default: 0
        format: int32
      - name: workflowState
        in: query
        description: filter for products by workflow state ref
        required: false
        type: string
        format: string
      responses:
        "200":
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions: []
    post:
      tags:
      - Products
      summary: Creates a new product
      description: |
        Createa a new product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_CREATE** granted.
      parameters:
      - in: body
        name: createProductBody
        description: Object that contains information to create new product
        required: true
        schema:
          $ref: '#/definitions/CreateProduct'
      responses:
        "201":
          description: Gets product details
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE
  /api/v1/products/{product-id}:
    get:
      tags:
      - Products
      summary: Gets product details
      description: |
        Gets the details of a product.

        MIME type of the response body can be selected from JSON and XML through the "Accept" Header in the request.

        Conditions to be able to perform the action:
          - No permissions are required to perform this action.
      produces:
      - application/json
      - application/xml
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/Product'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions: []
    put:
      tags:
      - Products
      summary: Updates a product
      description: |
        Updates the details of a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: updateProductBody
        description: Object that contains product details to update
        required: true
        schema:
          $ref: '#/definitions/UpdateProduct'
      responses:
        "200":
          description: Product updated
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
    delete:
      tags:
      - Products
      summary: Deletes a product
      description: |
        Deletes a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_DELETE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "204":
          description: The product has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_DELETE
  /api/v1/products/{product-id}/sync:
    put:
      tags:
      - Products
      summary: Syncronize the threat model of the project
      description: |
        Syncronize the threat model of the project, this will update threats and countermeasures based on its diagram and rules outcome.
        Conditions to be able to perform the action:
          - To have the permission **ARCHITECTURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: Project synchronization started
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ARCHITECTURE_UPDATE
  /api/v1/products/upload:
    post:
      tags:
      - Products
      - Libraries
      - Templates
      summary: "Creates a new product, library or template from a XML file upload."
      description: |
        Creates a new product, library or template from a XML file upload.
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_CREATE** granted allows to create a product.
        - To have the permission **LIBRARY_UPDATE** granted allows to create a library.
        - To have the permission **TEMPLATE_UPDATE** granted allows to create a template.
      consumes:
      - multipart/form-data
      parameters:
      - name: ref
        in: formData
        description: Product ref
        required: true
        type: string
        format: string
      - name: name
        in: formData
        description: Product name
        required: true
        type: string
        format: string
      - name: type
        in: formData
        description: "Product type - STANDARD (By default), TEMPLATE or LIBRARY"
        required: false
        type: string
        format: string
      - name: fileName
        in: formData
        description: File to upload in XML format
        required: true
        type: file
      responses:
        "201":
          description: Product details
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE
      - LIBRARY_UPDATE
      - TEMPLATE_UPDATE
  /api/v1/products/upload/{product-id}:
    post:
      tags:
      - Products
      summary: Updates an existing product from a XML file upload.
      description: |
        Updates a product from a XML file upload.
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_UPDATE** granted allows to update a product.
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
        format: string
      - name: fileName
        in: formData
        description: File to upload in XML format
        required: true
        type: file
      - name: deleteCountermeasures
        in: formData
        description: "This flag indicates if the rules execution will delete the threat and countermeasures which don't apply to the new product threat model. If true, the threats and countermeasures will be automatically removed from the model. If false, the threats and countermeasures won't be removed from the model."
        required: false
        type: string
        format: string
      responses:
        "200":
          description: Product details
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
  /api/v1/products/{product-id}/groups:
    get:
      tags:
      - Products
      - Groups
      summary: List all groups assigned to a product
      description: |
        List all groups assigned to a product.
            Conditions to be able to perform the action:
                - If the caller has the PRODUCTS_LIST_ALL permission then all products can be queried without restriction.
                - Without the PRODUCTS_LIST_ALL permission, the call will only return the groups if the caller belongs to that product.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      deprecated: true
      responses:
        "200":
          description: An array of groups assigned to the product
          schema:
            type: array
            items:
              type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCTS_LIST_ALL
    put:
      tags:
      - Products
      - Groups
      summary: Assigns groups of users to a product.
      description: |
        Assigns groups of users to a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: assignGroupsOfUsersToProductBody
        description: Object that contains information to assign groups to product
        required: true
        schema:
          type: object
          properties:
            groups:
              type: array
              description: List of groups to assign to product
              items:
                type: string
      deprecated: true
      responses:
        "201":
          description: Product details including groups assigned
          schema:
            $ref: '#/definitions/ProductShortGroups'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
    delete:
      tags:
      - Products
      - Groups
      summary: Unassigns a list of user groups from a product.
      description: |
        Unassigns a list of user groups from a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: unassignUserGroupsFromProductBody
        description: Object that contains information to unassign groups from a product
        required: true
        schema:
          type: object
          properties:
            groups:
              type: array
              description: List of groups to unassign from product
              items:
                type: string
      deprecated: true
      responses:
        "200":
          description: An object with an array of user groups that have been unassigned and an array of user groups that have not been found in the project
          schema:
            type: object
            properties:
              unassigned:
                type: array
                items:
                  type: string
              notFound:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
  /api/v1/products/{product-id}/businessunits:
    get:
      tags:
      - Products
      - Business Units
      summary: List all Business Units assigned to a product
      description: |
        List all Business Units assigned to a product.
            Conditions to be able to perform the action:
                - If the caller has the PRODUCTS_LIST_ALL permission then all products can be queried without restriction.
                - Without the PRODUCTS_LIST_ALL permission, the call will only return the groups if the caller belongs to that product.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of Business Units assigned to the product
          schema:
            type: array
            items:
              type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCTS_LIST_ALL
    put:
      tags:
      - Products
      - Business Units
      summary: Assigns Business Units of users to a product.
      description: |
        Assigns Business Units of users to a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: assignGroupsOfUsersToProductBody
        description: Object that contains information to assign Business Units to product
        required: true
        schema:
          type: object
          properties:
            groups:
              type: array
              description: List of Business Units to assign to product
              items:
                type: string
      responses:
        "201":
          description: Product details including Business Units assigned
          schema:
            $ref: '#/definitions/ProductShortGroups'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
    delete:
      tags:
      - Products
      - Business Units
      summary: Unassigns a list of user Business Units from a product.
      description: |
        Unassigns a list of user Business Units from a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: unassignUserGroupsFromProductBody
        description: Object that contains information to unassign Business Units from a product
        required: true
        schema:
          type: object
          properties:
            groups:
              type: array
              description: List of Business Units to unassign from product
              items:
                type: string
      responses:
        "200":
          description: An object with an array of user Business Units that have been unassigned and an array of user groups that have not been found in the project
          schema:
            type: object
            properties:
              unassigned:
                type: array
                items:
                  type: string
              notFound:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
  /api/v1/products/{product-id}/users:
    get:
      tags:
      - Products
      - Users
      summary: List all users assigned to a product
      description: |
        List all users assigned to a product.
            Conditions to be able to perform the action:
                - No permissions are required to perform this action.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of users assigned to the product
          schema:
            type: array
            items:
              type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    put:
      tags:
      - Products
      - Users
      summary: Assigns users to a product.
      description: |
        Assigns users to a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - in: body
        name: assignUsersToProductBody
        description: Object that contains the information to assign users to product
        required: true
        schema:
          type: object
          properties:
            users:
              type: array
              description: List of users to assign to product
              items:
                type: string
      responses:
        "201":
          description: Product details including users assigned
          schema:
            $ref: '#/definitions/ProductShortUsers'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
    delete:
      tags:
      - Products
      - Users
      summary: Unassigns a list of users from a product.
      description: |
        Unassign a list of users from a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: Unique ID for product
        required: true
        type: string
      - in: body
        name: unassignUsersFromProductBody
        description: Object that contains information to unassign users from product
        required: true
        schema:
          type: object
          properties:
            usernames:
              type: array
              description: List of users to unassign from a product
              items:
                type: string
      responses:
        "204":
          description: All users have been unassigned
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
  /api/v1/products/{product-id}/users/{user-id}:
    delete:
      tags:
      - Products
      - Users
      summary: Unassigns a user from a product
      description: |
        Unassigns a user from a product.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: user-id
        in: path
        description: Username of the user who will be unassigned from the product
        required: true
        type: string
      responses:
        "204":
          description: User has been unassigned from the product
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
  /api/v1/products/{product-id}/risks:
    get:
      tags:
      - Products
      - Risks
      summary: Gets the risks summary of a product
      description: |
        This endpoint returns a summary of the risks of a product.
        Conditions to be able to perform the action:
          - No permissions are required to perform this action.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: Product risks
          schema:
            $ref: '#/definitions/RiskSummary'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions: []
  /api/v1/products/{product-id}/controls:
    get:
      tags:
      - Products
      - Controls
      summary: Gets a list of all product countermeasures
      description: |
        Returns a list of all the countermeasures of a product.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted, or
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of product countermeasures
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/controls/implemented:
    get:
      tags:
      - Products
      - Controls
      summary: Gets a list of all implemented countermeasures of a product.
      description: |
        Returns a list of all the implemented countermeasures of a product.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted, or
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of product countermeasures
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/controls/required:
    get:
      tags:
      - Products
      - Controls
      summary: Gets a list of all required countermeasures of a product
      description: |
        Returns a list of all the required countermeasures of a product.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted, or
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of product countermeasures
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/controls:
    delete:
      tags:
      - Products
      - Controls
      summary: Deletes the given list of product countermeasures
      description: |
        Deletes the given list of the countermeasures of a product.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_DELETE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - in: body
        name: deleteCountermeasuresFromProductBody
        description: List of countermeassures ids
        required: true
        schema:
          type: object
          properties:
            controlsId:
              type: array
              description: List of countermeassures ids to delete
              items:
                type: string
      responses:
        "204":
          description: Countermesassures have been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_DELETE
  /api/v1/products/{product-id}/components/{component-id}/controls/required:
    get:
      tags:
      - Products
      - Controls
      summary: Gets a list of all required countermeasures of a component
      description: |
        Returns a list of all the required countermeasures of a component.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted, or
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      consumes:
      - application/json
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      responses:
        "200":
          description: An array of component countermeasures
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Deprecated in favour of specific endpoint for each state (links at description)
      description: |
        Deprecated in favour of specific endpoints for each state:
          - [Recommended](#Controls/countermeasure-state-recommended)
          - [Required](#Controls/countermeasure-state-required)
          - [Implemented](#Controls/countermeasure-state-implemented)
          - [Rejected](#Controls/countermeasure-state-rejected)
          - [Not Applicable](#Controls/countermeasure-state-not-applicable)

        Sets the desired status to a countermeasure.

        Possible values are:
                    - implemented
                    - recommended
                    - rejected
                    - required

        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.
          - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.
          - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.
          - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      - in: body
        name: setStatusToCountermeasureBody
        description: Object that contains the information to update countermeasure
        required: true
        schema:
          type: object
          properties:
            statusName:
              type: string
              description: New state of the countermeasure ( rejected | recommended | required | implemented )
              enum:
              - rejected
              - recommended
              - required
              - implemented
            rejectedReason:
              type: string
              description: Reason for rejecting the countermeasure
      deprecated: true
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/comments:
    post:
      tags:
      - Controls
      - Countermeasures
      summary: Creates a new comment in the given countermeasure
      description: |
        Returns the list of comments for the countermeasure.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
      - in: body
        name: createCommentInCountermeasureBody
        description: Object that contains information of the fields
        required: true
        schema:
          $ref: '#/definitions/CreateCommentInCountermeasure'
      responses:
        "200":
          description: The comments list of the countermeasure
          schema:
            type: array
            items:
              $ref: '#/definitions/Comment'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
  /api/v1/products/{product-id}/components/{component-id}/controls/{control-id}:
    get:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Gets a concrete countermeasure from a component of a product
      description: |
        Returns the countermeasure from a component in a product.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_VIEW** granted, or
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: control-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
      responses:
        "200":
          description: The countermeasure from a component of a product
          schema:
            $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_VIEW
      - COUNTERMEASURE_UPDATE
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Updates a concrete countermeasure from a component of a product
      description: |
        Updates the countermeasure from a component of a product and returns it.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: control-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
      - in: body
        name: updateControlRequest
        description: Object that contains the information to update countermeasure
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: The reference of the countermeasure
            name:
              type: string
              description: The name of the countermeasure
            desc:
              type: string
              description: The description of the countermeasure
            state:
              type: string
              description: The state of the countermeasure
              enum:
              - NOTAPPLICABLE
              - REJECTED
              - RECOMMENDED
              - REQUIRED
              - IMPLEMENTED
            platform:
              type: string
              description: The platform of the countermeasure
            issueId:
              type: string
              description: The IssueTracker issue ID of the countermeasure
            costRating:
              type: string
              description: The cost rating of the countermeasure
              enum:
              - low
              - medium
              - high
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status/recommended:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Transition a countermeasure to recommended state.
      description: |
        Transition a countermeasure to recommended state.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_RECOMMENDED** granted to set recommended state.
      operationId: countermeasure-state-recommended
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
      - COUNTERMEASURE_SELECT_RECOMMENDED
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status/required:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Transition a countermeasure to required state.
      description: |
        Transition a countermeasure to required state.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_REQUIRED** granted to set required state.
      operationId: countermeasure-state-required
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
      - COUNTERMEASURE_SELECT_REQUIRED
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status/implemented:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Transition a countermeasure to implemented state.
      description: |
        Transition a countermeasure to implemented state.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_IMPLEMENTED** granted to set implemented state.
      operationId: countermeasure-state-implemented
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
      - COUNTERMEASURE_SELECT_IMPLEMENTED
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status/rejected:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Transition a countermeasure to rejected state.
      description: |
        Transition a countermeasure to rejected state.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_REJECTED** granted to set reject state.
      operationId: countermeasure-state-rejected
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      - in: body
        name: setStatusRejectedToCountermeasureBody
        description: Object that contains the information to transition countermeasure to rejected
        required: true
        schema:
          type: object
          properties:
            reason:
              type: string
              description: Reason for rejecting the countermeasure
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
      - COUNTERMEASURE_SELECT_REJECTED
  /api/v1/products/{product-id}/components/{component-id}/controls/{countermeasure-id}/status/not-applicable:
    put:
      tags:
      - Products
      - Controls
      - Countermeasures
      summary: Transition a countermeasure to Not Applicable state.
      description: |
        Transition a countermeasure to Not Applicable state.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_UPDATE** granted to set any state.
          - To have the permission **COUNTERMEASURE_SELECT_NA** granted to set Not Applicable state.
      operationId: countermeasure-state-not-applicable
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: countermeasure-id
        in: path
        description: ID for countermeasure
        required: true
        type: string
        format: string
      - in: body
        name: setStatusNotApplicableToCountermeasureBody
        description: Object that contains the information to transition countermeasure to Not Applicable
        required: true
        schema:
          type: object
          properties:
            reason:
              type: string
              description: Reason the countermeasure is not applicable
      responses:
        "200":
          description: An empty array
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_UPDATE
      - COUNTERMEASURE_SELECT_NA
  /api/v1/products/{product-id}/components/{component-id}/countermeasures:
    post:
      tags:
      - Products
      - Components
      - Controls
      - Countermeasures
      summary: Creates new countermeasure in a component
      description: |
        Creates new countermeasure in a component.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_CREATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - in: body
        name: createCountermeasureInComponentBody
        description: Object that contains information of the fields
        required: true
        schema:
          $ref: '#/definitions/CreateProductCountermeasure'
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_CREATE
  /api/v1/products/{product-id}/components/{component-id}/usecases/{use-case-id}/threats/{threat-id}/countermeasures:
    put:
      tags:
      - Products
      - Components
      - Use Cases
      - Threats
      - Countermeasures
      summary: Associates a countermeasure to a threat in a component.
      description: |
        Associates a countermeasure to a threat in a component.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_CREATE** granted or
          - To have the permission **COUNTERMEASURE_ADD_FROM_EXISTING** granted
      parameters:
      - name: product-id
        in: path
        description: Unique ID of the project
        required: true
        type: string
      - name: component-id
        in: path
        description: Unique ID of the component
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - in: body
        name: associateCountermeasureToThreatInComponentBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Existing Countermesasure reference
            mitigation:
              type: integer
              description: Mitigation
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_CREATE
      - COUNTERMEASURE_ADD_FROM_EXISTING
  ? /api/v1/products/{product-id}/components/{component-id}/usecases/{use-case-id}/threats/{threat-id}/weaknesses/{weakness-id}/countermeasures
  : put:
      tags:
      - Products
      - Components
      - Use Cases
      - Threats
      - Weaknesses
      - Countermeasures
      summary: Associates a countermeasure to a weakness in a component.
      description: |
        Associates a countermeasure to a weakness in a component.
        Conditions to be able to perform the action:
          - To have the permission **COUNTERMEASURE_CREATE** granted or,
          - To have the permission **COUNTERMEASURE_ADD_FROM_EXISTING** granted.
      parameters:
      - name: product-id
        in: path
        description: Unique ID of the project
        required: true
        type: string
      - name: component-id
        in: path
        description: Unique ID of the component
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - name: weakness-id
        in: path
        description: Unique ID of the weakness
        required: true
        type: string
      - in: body
        name: associateCountermeasureToWeaknessInComponentBody
        description: Object that contains information of the fields
        required: true
        schema:
          type: object
          properties:
            ref:
              type: string
              description: Existing Countermesasure reference
            mitigation:
              type: integer
              description: Mitigation
      responses:
        "201":
          description: Countermeasure details
          schema:
            $ref: '#/definitions/ComponentControl'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - COUNTERMEASURE_CREATE
      - COUNTERMEASURE_ADD_FROM_EXISTING
  /api/v1/products/{product-id}/threats:
    get:
      tags:
      - Products
      - Threats
      summary: Gets a list of all threats of a product
      description: |
        Returns a list of all the threats of a product.
        Conditions to be able to perform the action:
          - To have the permission **THREAT_VIEW** granted, or
          - To have the permission **THREAT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of product threats
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentUseCaseThreat'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - THREAT_VIEW
      - THREAT_UPDATE
  /api/v1/threats:
    get:
      tags:
      - Threats
      summary: Retrieve all the threats that meet the provided criteria.
      description: |
        Retrieve all the threats that meet the provided criteria.
        Conditions to be able to perform the action:
          - To have the permission **PRODUCTS_LIST_ALL** granted or,
          - To have the permission **PRODUCTS_LIST_ALL_READ_ONLY** granted.
      parameters:
      - name: workflow-state
        in: query
        description: |
          Unique ID of the workflow state.
          With this parameter the response will include just the threats included in products that meet with this workflow state.
        required: false
        type: string
      - name: risk-response
        in: query
        description: |
          Risk response planned for the threat.
          With this parameter the response will include just the threats that meet with this risk risponse
        required: false
        type: string
        enum:
        - unmitigated
        - no-mitigation-planned
      - name: current-risk
        in: query
        description: |
          Current risk for the threat.
          With this parameter the response will include just the threats that meet with this current risk.
        required: false
        type: string
        enum:
        - very-low
        - low
        - medium
        - high
        - critical
      responses:
        "200":
          description: Threat details array
          schema:
            type: array
            items:
              $ref: '#/definitions/ThreatDetails'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCTS_LIST_ALL
      - PRODUCTS_LIST_ALL_READ_ONLY
  /api/v1/products/{product-id}/weaknesses:
    get:
      tags:
      - Products
      - Weaknesses
      summary: Gets a list of all weaknesses of a product
      description: |
        Returns a list of all the weaknesses of a product.
        Conditions to be able to perform the action:
          - To have the permission **THREAT_VIEW** granted, or
          - To have the permission **THREAT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: An array of product weaknesses
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentWeakness'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - THREAT_VIEW
      - THREAT_UPDATE
  /api/v1/products/{product-id}/weaknesses/{test-state}:
    get:
      tags:
      - Products
      - Weaknesses
      summary: Gets a list of all weaknesses of a product filtered by test state
      description: |
        Returns a list of all the weaknesses of a product.
        With the optional parameter `test_state` can filter the weakness by test state.
        Conditions to be able to perform the action:
          - To have the permission **THREAT_VIEW** granted, or
          - To have the permission **THREAT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: test-state
        in: path
        description: Code for a test state
        required: true
        type: string
        enum:
        - failed
        - error
        - not-tested
        - passed
        - not-applicable
        - partially-tested
      responses:
        "200":
          description: An array of product weaknesses
          schema:
            type: array
            items:
              $ref: '#/definitions/ComponentWeakness'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - THREAT_VIEW
      - THREAT_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/tests/{cwe}:
    put:
      tags:
      - Products
      - Components
      - Tests
      summary: Updates a single test to a component.
      description: |
        Updates a single test to a component.
        Conditions to be able to perform the action:
          - To have the permission **TEST_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: cwe
        in: path
        description: CWE for countermeasure or weakness
        required: true
        type: string
      - in: body
        name: updateTestToComponentBody
        description: Object that contains the information to update test
        required: true
        schema:
          type: object
          properties:
            state:
              type: string
              description: New state of the test ( not-tested | passed | failed | error )
              enum:
              - not-tested
              - passed
              - failed
              - error
            output:
              type: string
              description: new output of the test
      responses:
        "200":
          description: Tests updated
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: number
                source:
                  type: object
                  properties:
                    result:
                      type: string
                    output:
                      type: string
                control:
                  type: object
                  properties:
                    name:
                      type: string
                    component:
                      type: string
                    project:
                      type: string
                weakness:
                  type: object
                  properties:
                    name:
                      type: string
                    component:
                      type: string
                    project:
                      type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - TEST_UPDATE
  /api/v1/products/{product-id}/tests/{type}/upload:
    post:
      tags:
      - Products
      - Tests
      summary: Imports test results from different sources to a product.
      description: |
        Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) uploading files. More than one file can be attached to the call.
        Conditions to be able to perform the action:
          - To have the permission **TEST_UPDATE** granted.
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: type
        in: path
        description: Type of test to be imported
        required: true
        type: string
        enum:
        - zap
        - cucumber
        - junit
        - hp-fortify
      - name: fileName
        in: formData
        description: File to upload
        required: false
        type: file
      responses:
        "201":
          description: Tests updated. Returns the number of changed tests
          schema:
            type: object
            properties:
              changedTest:
                type: number
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - TEST_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/tests/{type}/upload:
    post:
      tags:
      - Products
      - Components
      - Tests
      summary: Imports test results from different sources to a component
      description: |
        Imports test results from different sources (OWASP ZAP, Cucumber, Micro Focus Fortify) into the specified component. More than one file can be attached to the call.
        Conditions to be able to perform the action:
          - To have the permission **TEST_UPDATE** granted.
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      - name: component-id
        in: path
        description: ID for component
        required: true
        type: string
      - name: type
        in: path
        description: Type of test to be imported
        required: true
        type: string
        enum:
        - zap
        - cucumber
        - junit
        - hp-fortify
      - name: fileName
        in: formData
        description: File to upload
        required: false
        type: file
      responses:
        "201":
          description: Tests updated. Returns the number of changed tests
          schema:
            type: object
            properties:
              changedTest:
                type: number
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - TEST_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/usecases/{use-case-id}/threats/{threat-id}/customfields:
    post:
      tags:
      - Products
      - Threats
      - Custom fields
      summary: Update the value of one or more custom fields for a given threat
      description: |
        Update the value of one or more custom fields for a given threat.
        Conditions to be able to perform the action (both are required):
          - To have the permission **THREAT_UPDATE** granted.
          - To have permission to update each custom field.
      parameters:
      - name: product-id
        in: path
        description: Unique ID of the product
        required: true
        type: string
      - name: component-id
        in: path
        description: Unique ID of the component
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - name: threat-id
        in: path
        description: Unique ID of the threat
        required: true
        type: string
      - in: body
        name: updateThreatCustomFieldsBody
        description: Object that contains information of the custom fields to be updated
        required: true
        schema:
          type: object
          properties:
            customFields:
              type: array
              description: "List of custom fields to be updated. Just the custom fields types DATE, TEXT and TEXTAREA are currently supported."
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: Unique ID of the custom field
                  value:
                    type: string
                    description: New value of the custom field. In case the custom field is of type date the accepted format will be "dd-mm-yyyy". Example -> "01-02-2021"
      responses:
        "201":
          description: Threat details after the update
          schema:
            $ref: '#/definitions/Threat'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - THREAT_UPDATE
  /api/v1/products/{product-id}/components/{component-id}/usecases/{use-case-id}/threats:
    post:
      tags:
      - Products
      - Threats
      summary: Creates new threat in an use case
      description: |
        Creates new threat in an use case.
        Conditions to be able to perform the action (both are required):
          - To have the permission **THREAT_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: Unique ID of the product
        required: true
        type: string
      - name: component-id
        in: path
        description: Unique ID of the component
        required: true
        type: string
      - name: use-case-id
        in: path
        description: Unique ID of the use case
        required: true
        type: string
      - in: body
        name: createThreatInUseCaseBody
        description: Object that contains information of the threat
        required: true
        schema:
          $ref: '#/definitions/CreateProductThreat'
      responses:
        "201":
          description: Threat details
          schema:
            $ref: '#/definitions/ProductThreat'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - THREAT_UPDATE
  /api/v1/products/{product-id}/diagram/image:
    get:
      tags:
      - Products
      summary: Gets diagram image for product.
      description: |
        Gets a an image in png format of the product diagram.
        Conditions to be able to perform the action:
          - No special permissions are required to perform this action.
          - This API call can be used only if the user who performs the call has visibility over the product.
      parameters:
      - name: product-id
        in: path
        description: ID for product
        required: true
        type: string
      responses:
        "200":
          description: A Diagram Image
          schema:
            type: string
            format: binary
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions: []
  /api/v1/products/otm/:
    post:
      tags:
      - otm
      - project
      summary: Creates a new project from an OTM file upload.
      description: |
        Creates a new project from an OTM file upload.
        Conditions to  be able to perform the action:
        - To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.
      consumes:
      - multipart/form-data
      parameters:
      - name: file
        in: formData
        description: File that contains the OTM schema
        required: true
        type: file
      responses:
        "200":
          description: Project created successfully
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/otm/{project-id}:
    get:
      tags:
      - otm
      - project
      summary: Exports the specified project as an OTM (YAML format) file.
      description: |
        Exports a project as an OTM file, in YAML format, for the response body.
        Conditions to be able to perform the action:
        - PRODUCT_EXPORT permission required.
        - The state of the project must be SYNCED.
        This means the threat model must not being updated and the diagram must not be in draft mode.
        This is to avoid inconsistencies in the content of the otm file during export process.
      produces:
      - "text/plain,application/json"
      parameters:
      - name: project-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      responses:
        "200":
          description: Product successfully exported
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_EXPORT
    put:
      tags:
      - otm
      - project
      summary: Updates an existing project from a OTM file upload.
      description: |
        Updates an existing project from a OTM file upload.
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_UPDATE** granted allows to update a project.
        - To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted
      consumes:
      - multipart/form-data
      parameters:
      - name: project-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: file
        in: formData
        description: File that contains the OTM schema
        required: true
        type: file
      responses:
        "200":
          description: |
            IriusRisk project has been updated with the last changes coming from the provided OTM schema.
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/users:
    get:
      tags:
      - Users
      summary: List of all Users.
      description: |
        Returns a list of all the users of the system.
        Conditions to be able to perform the action:
          - To have the permission **ALL_USERS_UPDATE** granted.
      parameters: []
      responses:
        "200":
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
    post:
      tags:
      - Users
      summary: Creates a new user
      description: |
        Creates a new user.
        Conditions to be able to perform the action:
          - To have the permission **ALL_USERS_UPDATE** granted.
      parameters:
      - in: body
        name: createUserBody
        description: Object that contains information to creates new user
        required: true
        schema:
          type: object
          required:
          - auth
          - email
          - firstName
          - lastName
          - roleGroups
          - username
          properties:
            username:
              type: string
              description: Username of the user
            auth:
              type: string
              description: Authentication type
              enum:
              - ldap
              - saml
            email:
              type: string
              description: Email of the user
            firstName:
              type: string
              description: First name of the user
            lastName:
              type: string
              description: Last name of the user
            roleGroups:
              type: array
              description: List of roles' refs to assign to the user. Can be an empty list.
              items:
                type: string
      responses:
        "201":
          description: User has been created
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
  /api/v1/users/{user-id}:
    get:
      tags:
      - Users
      summary: Get all the information of a user
      description: |
        Get all the relevant information of a user
      parameters:
      - name: user-id
        in: path
        description: Username for user
        required: true
        type: string
      responses:
        "200":
          description: The data of the user
          schema:
            $ref: '#/definitions/UserDetailed'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
    delete:
      tags:
      - Users
      summary: Deletes a user
      description: |
        Deletes a user.
        Conditions to be able to perform the action:
          - To have the permission **ALL_USERS_UPDATE** granted, or
          - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can delete users who belongs to some of your user groups.
      parameters:
      - name: user-id
        in: path
        description: Username for user
        required: true
        type: string
      responses:
        "204":
          description: User has been deleted
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/users/{user-id}/token:
    post:
      tags:
      - Users
      - Token
      summary: Generates a user API token
      description: |
        Generates a new user API token. If the user already has a generated API token, generates a new one.
        Conditions to be able to perform the action:
          - To have the permission **ALL_USERS_UPDATE** granted, or
          - To have the permission **MANAGE_USERS_BU** granted. Having this permission you can generate a user API token to users who belongs to some of your user groups.
      parameters:
      - name: user-id
        in: path
        description: Username for user
        required: true
        type: string
      responses:
        "201":
          description: The user API token
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ALL_USERS_UPDATE
      - MANAGE_USERS_BU
  /api/v1/rules/product/{product-id}:
    put:
      tags:
      - Rules
      - Products
      summary: Executes rules by a product
      description: |
        Execute the rules engine for a product and for all components within the product.  If the deleteCountermeasures
        parameter is true, then threats and countermeasure that no longer apply to the model will automatically be
        removed.  If it is false, then those threats and countermeasures will remain in the model.
          - To have the permission **ARCHITECTURE_UPDATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for Product
        required: true
        type: string
      - name: deleteCountermeasures
        in: header
        description: "This flag indicates if the rules execution will delete the threat and countermeasures which don't apply to the new product threat model. If true, the threats and countermeasures will be automatically removed from the model. If false, the threats and countermeasures won't be removed from the model."
        required: false
        type: string
        format: string
      responses:
        "200":
          description: Rules executed properly
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ARCHITECTURE_UPDATE
  /api/v1/rules/verify:
    post:
      tags:
      - Rules
      summary: Verify rules for a product.
      description: |
        Verify rules for a product by running the rules engine and checking the output.
        Conditions to be able to perform the action:
          - To have the permission **ARCHITECTURE_UPDATE** granted, or
          - To have the permission **EDIT_RULES** granted.
      parameters:
      - in: body
        name: verifyRulesRequestBody
        description: Object that contains information to run a rules verification session over a product.
        required: true
        schema:
          type: object
          properties:
            projectRef:
              type: string
              description: Identifier of the project to be used as input
            rules:
              type: array
              description: "List of rule names that must be verified by library, module and name"
              items:
                $ref: '#/definitions/Rule'
            includeAllActiveRules:
              type: boolean
              description: "for the true value, the list of rules indicated will be merged with all the active rules on the system to be executed in the rules engine, but for the false value only the rules indicated will be executed in the rules engine with the project"
      responses:
        "200":
          description: List of actions resultant from the rules engine execution.
          schema:
            type: array
            items:
              $ref: '#/definitions/RulesSessionEvent'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - ARCHITECTURE_UPDATE
      - EDIT_RULES
  /api/v1/workflowstates:
    get:
      tags:
      - Workflow States
      summary: List of all Workflow states.
      description: |
        Returns a list of all the workflow states.
      parameters: []
      responses:
        "200":
          description: An array of workflow states
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkflowState'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
  /api/v1/vulnerabilities/products/{product-id}:
    post:
      tags:
      - Vulnerabilities
      summary: Create the vulnerabilities into the Vulnerability Tracker
      description: |
        Create the vulnerabilities from the controls into the Vulnerability Tracker
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_UPDATE** granted.
        - To have the permission **VULNERABILITY_TRACKER_CREATE** granted.
      parameters:
      - name: product-id
        in: path
        description: ID for Product
        required: true
        type: string
      responses:
        "200":
          description: An array with creation process executed
          schema:
            type: array
            items:
              $ref: '#/definitions/VulnerabilitiesCreationResult'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - VULNERABILITY_TRACKER_CREATE
  /api/v1/vulnerabilities/status/{provider}/{creation-process-id}:
    get:
      tags:
      - Vulnerabilities
      summary: Get the status of creation process for vulnerabilities
      description: |
        Get the status of a creation process launched by the endpoint to create vulnerabilities
        Conditions to be able to perform the action:
        - To have the permission **VULNERABILITY_TRACKER_CREATE** granted.
      parameters:
      - name: provider
        in: path
        description: Provider name
        required: true
        type: string
        enum:
        - threadfix
      - name: creation-process-id
        in: path
        description: ID for Creation Process
        required: true
        type: string
      responses:
        "200":
          description: Status creation process
          schema:
            $ref: '#/definitions/VulnerabilitiesCreationStatus'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - VULNERABILITY_TRACKER_CREATE
  /api/v1/products/cloudformation:
    post:
      tags:
      - IaC
      - Cloudformation
      - Products
      summary: Creates a new project from a CloudFormation Template (CFT)
      description: |
        Creates a new project from a CloudFormation Template (CFT).
        The CloudFormation max file size allowed is 1MB.
        The mapping file max file size allowed is 5MB.
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.
      consumes:
      - multipart/form-data
      parameters:
      - name: cft-file
        in: formData
        description: Files that contain the CloudFormation Templates
        required: true
        type: array
        items:
          type: string
          format: binary
        collectionFormat: multi
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between AWS components and IriusRisk components. Providing this file will completely override default values
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/cloudformation/{product-id}:
    put:
      tags:
      - IaC
      - Cloudformation
      - Products
      summary: Updates an existing project from a CloudFormation Template (CFT)
      description: |
        Updates an existing project from a CloudFormation Template (CFT).
        The CloudFormation max file size allowed is 1MB.
        The mapping file max file size allowed is 5MB.
        Conditions to be able to perform the action:
        - To have the permission **PRODUCT_UPDATE** granted allows to update a project.
        - To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: cft-file
        in: formData
        description: Files that contain the CloudFormation Templates
        required: true
        type: array
        items:
          type: string
          format: binary
        collectionFormat: multi
      - name: name
        in: formData
        description: Name of the project to update
        required: false
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between AWS components and IriusRisk components. Providing this file will completely override default values
        required: false
        type: file
      responses:
        "200":
          description: Updated project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/tfplan:
    post:
      tags:
      - IaC
      - Terraform
      - Products
      summary: Creates a new project from Terraform Plan and Graph files
      description: "Creates a new project from Terraform Plan and Graph files.\nThe Terraform plan max file size allowed is 50MB. \nThe graph max file size allowed is 50MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: tfplan-file
        in: formData
        description: File that contains the Terraform Plan
        required: true
        type: file
      - name: tfgraph-file
        in: formData
        description: File that contains the Terraform Graph
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between AWS components and IriusRisk components. Providing this file will completely override default values
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/tfplan/{product-id}:
    put:
      tags:
      - IaC
      - Terraform
      - Products
      summary: Updates an existing project from Terraform Plan and Graph files
      description: "Updates an existing project from Terraform Plan and Graph files.\nThe Terraform plan max file size allowed is 50MB. \nThe graph max file size allowed is 50MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_UPDATE** granted allows to update a project.\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: tfplan-file
        in: formData
        description: File that contains the Terraform Plan
        required: true
        type: file
      - name: tfgraph-file
        in: formData
        description: File that contains the Terraform Graph
        required: true
        type: file
      - name: name
        in: formData
        description: Name of the project to update
        required: false
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between AWS components and IriusRisk components. Providing this file will completely override default values
        required: false
        type: file
      responses:
        "200":
          description: Updated project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/visio:
    post:
      tags:
      - Diagram
      - Visio
      - Products
      summary: Creates a new project from a Visio file (VSDX)
      description: "Creates a new project from a Visio file (VSDX).\nThe Visio max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: vsdx-file
        in: formData
        description: File that contains the Visio file
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic Visio shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/visio/{product-id}:
    put:
      tags:
      - Diagram
      - Visio
      - Products
      summary: Updates an existing project from a Visio file (VSDX)
      description: "Updates an existing project from a Visio file (VSDX).\nThe Visio max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_UPDATE** granted allows to update a project.\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: vsdx-file
        in: formData
        description: File that contains the Visio file
        required: true
        type: file
      - name: name
        in: formData
        description: Name of the project to update
        required: false
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic Visio shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "200":
          description: Updated project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/mtmt:
    post:
      tags:
      - Etm
      - MTMT
      - Products
      summary: Creates a new project from a MTMT file (tm7)
      description: "Creates a new project from a MTMT file (tm7).\nThe MTMT max file size allowed is 20MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: tm7-file
        in: formData
        description: File that contains the MTMT file
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic MTMT components and IriusRisk components.
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/mtmt/{product-id}:
    put:
      tags:
      - Etm
      - MTMT
      - Products
      summary: Updates an existing project from a MTMT file (tm7)
      description: "Updates an existing project from a MTMT file (tm7).\nThe MTMT max file size allowed is 20MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_UPDATE** granted allows to update a project.\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: tm7-file
        in: formData
        description: File that contains the MTMT file
        required: true
        type: file
      - name: name
        in: formData
        description: Name of the project to update
        required: false
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic MTMT components and IriusRisk components.
        required: false
        type: file
      responses:
        "200":
          description: Updated project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/lucid:
    post:
      tags:
      - Diagram
      - Lucid
      - Products
      summary: Creates a new project from a Lucidchart file (VSDX)
      description: "Creates a new project from a Lucidchart file (VSDX).\nThe Lucidchart max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: source-file
        in: formData
        description: File that contains the Lucid file
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/lucid/{product-id}:
    put:
      tags:
      - Diagram
      - Lucid
      - Products
      summary: Updates an existing project from a Lucidchart file (VSDX)
      description: "Updates an existing project from a Lucidchart file (VSDX).\nThe Lucidchart max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_UPDATE** granted allows to update a project.\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: product-id
        in: path
        description: ID of the project to update
        required: true
        type: string
      - name: source-file
        in: formData
        description: File that contains the source file
        required: true
        type: file
      - name: name
        in: formData
        description: Name of the project to update
        required: false
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "200":
          description: Updated project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "404":
          description: Item/s not found
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_UPDATE
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/drawio:
    post:
      tags:
      - Diagram
      - Drawio
      - Products
      summary: Creates a new project from a Drawio file
      description: "Creates a new project from a Drawio file.\nThe Drawio max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: source-file
        in: formData
        description: File that contains the Drawio file (drawio|xml)
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
  /api/v1/products/abacus:
    post:
      tags:
      - Diagram
      - Abacus
      - Products
      summary: Creates a new project from an Abacus file
      description: "Creates a new project from an Abacus file.\nThe Abacus max file size allowed is 10MB. \nThe mapping file max file size allowed is 5MB.\nConditions to be able to perform the action:\n- To have the permission **PRODUCT_CREATE_UPDATE_OTM** granted.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: source-file
        in: formData
        description: File that contains the Abacus file (json)
        required: true
        type: file
      - name: product-id
        in: formData
        description: Id of the new project in IriusRisk
        required: true
        type: string
      - name: name
        in: formData
        description: Name of the new project in IriusRisk
        required: true
        type: string
      - name: mapping-file
        in: formData
        description: File that contains the mapping between generic shapes and IriusRisk components.
        required: false
        type: file
      responses:
        "201":
          description: Created project
          schema:
            $ref: '#/definitions/ProductShort'
        "400":
          description: Bad request
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "401":
          description: Authentication information is missing or invalid or not granted to perform this action.
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        "403":
          description: Forbidden operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            type: array
            items:
              $ref: '#/definitions/Error'
      x-permissions:
      - PRODUCT_CREATE_UPDATE_OTM
securityDefinitions:
  api_token:
    description: Authentication token
    type: apiKey
    name: api-token
    in: header
definitions:
  Health:
    type: object
    properties:
      version:
        type: string
        example: 4.12.0-457-gb35a8617b1-01/02/23 17:58
        description: Version of IriusRisk currently deployed in the instance.
      apiVersion:
        type: string
        example: 1.19.0
        description: Version of IriusRisk API currently available in the instance.
      status:
        type: string
        example: "200"
        description: HTTP status code describing the availability of the instance.
        enum:
        - "200"
        - "500"
      ui:
        type: string
        example: OK
        description: Code that describes the user interface availability of the instance.
        enum:
        - OK
        - NOT AVAILABLE USER INTERFACE
      database:
        type: string
        example: OK
        description: Code that describes the database availability of the instance.
        enum:
        - OK
        - NOT AVAILABLE CONNECTION
      cache:
        type: string
        example: OK
        description: Code that describes the cache availability of the instance.
        enum:
        - OK
        - NOT AVAILABLE CONNECTION
      messageBroker:
        type: string
        example: OK
        description: Code that describes the message broker availability of the instance.
        enum:
        - OK
        - NOT AVAILABLE CONNECTION
      licenseText:
        type: string
        example: Licensed to Acme for 100 projects
        description: Human readable text describing the company who is licensed to use IriusRisk and the limit of projects defined in the license.
      validDate:
        type: string
        example: 2023-05-13
        description: Date that marks the last day when the license will be valid.
      company:
        type: string
        example: Acme
        description: Name of the company who is licensed to use IriusRisk.
      appLimit:
        type: integer
        example: 100
        description: Limit of projects that can be created according to the license.
      services:
        type: object
        properties:
          startleft:
            type: string
            example: UP
            enum:
            - UP
            - DOWN
            - OUT_OF_SERVICE
            - UNKNOWN
  HealthDb:
    type: object
    properties:
      status:
        type: string
        example: "200"
        description: HTTP status code describing the connection status.
        enum:
        - "200"
        - "500"
      database:
        type: string
        example: OK
        description: Code describing the connection status.
        enum:
        - OK
        - NOT AVAILABLE CONNECTION
  HealthAI:
    type: object
    properties:
      status:
        type: string
        example: AVAILABLE
        description: String describing the service availability.
        enum:
        - AVAILABLE
        - UNAVAILABLE
  WorkflowState:
    type: object
    properties:
      ref:
        type: string
      position:
        type: integer
      name:
        type: string
      label:
        type: string
      description:
        type: string
  ProductShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      revision:
        type: integer
        format: int32
        default: 1
      type:
        type: string
      status:
        type: string
      priority:
        type: integer
        format: int32
        default: 0
      tags:
        type: string
      workflowState:
        type: string
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      groups:
        type: array
        items:
          type: string
      users:
        type: array
        items:
          type: string
  CreateProduct:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      tags:
        type: string
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
  UpdateProduct:
    type: object
    properties:
      name:
        type: string
      desc:
        type: string
      tags:
        type: string
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
  LibraryThreat:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      mitigation:
        type: integer
      risk:
        type: integer
      inherentRisk:
        type: integer
      projectedRisk:
        type: integer
      riskRating:
        $ref: '#/definitions/RiskRating'
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/ThreatWeakness'
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControl'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
  RiskPattern:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      tags:
        type: array
        description: List of tags
        items:
          type: string
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/LibraryWeakness'
      countermeasures:
        type: array
        items:
          $ref: '#/definitions/LibraryControl'
      usecases:
        type: array
        items:
          $ref: '#/definitions/LibraryUseCase'
  LibraryUseCase:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      threats:
        type: array
        items:
          $ref: '#/definitions/LibraryThreat'
  Library:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      riskPatterns:
        type: array
        items:
          $ref: '#/definitions/RiskPattern'
  LibraryShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      revision:
        type: integer
        format: int64
        default: 1
      type:
        type: string
      desc:
        type: string
      enabled:
        type: boolean
      tags:
        type: string
  LibraryWeakness:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      state:
        type: string
      impact:
        type: string
      test:
        $ref: '#/definitions/Test'
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControl'
  LibraryControl:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      platform:
        type: string
      cost:
        type: integer
      risk:
        type: integer
      state:
        type: string
      mitigation:
        type: string
        description: This field will be included in threats and weaknesses that is where it belongs.
      threats:
        type: array
        items:
          $ref: '#/definitions/ThreatNameAndRef'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/WeaknessNameRefAndMitigation'
      implementations:
        type: array
        items:
          $ref: '#/definitions/Implementation'
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      standards:
        type: array
        items:
          $ref: '#/definitions/Standard'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      test:
        $ref: '#/definitions/Test'
  ProductShortGroups:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      revision:
        type: integer
        format: int32
        default: 1
      type:
        type: string
      status:
        type: string
      priority:
        type: integer
        format: int32
        default: 0
      tags:
        type: string
      workflowState:
        type: string
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      groups:
        type: array
        items:
          type: string
  ProductShortUsers:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      revision:
        type: integer
        format: int32
        default: 1
      type:
        type: string
      status:
        type: string
      priority:
        type: integer
        format: int32
        default: 0
      tags:
        type: string
      workflowState:
        type: string
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      users:
        type: array
        items:
          type: string
  Product:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      isSyncing:
        type: boolean
      revision:
        type: integer
      type:
        type: string
      status:
        type: string
      priority:
        type: integer
      tags:
        type: string
      desc:
        type: string
      workflowState:
        type: string
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
      diagram:
        $ref: '#/definitions/ArchitectureDiagram'
      assets:
        type: array
        items:
          $ref: '#/definitions/ProductAsset'
      accessTypes:
        type: array
        items:
          $ref: '#/definitions/ProductAccessType'
      trustZones:
        type: array
        items:
          $ref: '#/definitions/ProductTrustZone'
      settings:
        $ref: '#/definitions/ProductSetting'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      supportedStandards:
        type: array
        items:
          $ref: '#/definitions/SupportedStandard'
      categoryComponents:
        type: array
        items:
          $ref: '#/definitions/CategoryComponent'
      componentDefinitions:
        type: array
        items:
          $ref: '#/definitions/ComponentDefinition'
      components:
        type: array
        items:
          $ref: '#/definitions/Component'
      dataflows:
        type: array
        items:
          $ref: '#/definitions/DataFlow'
      users:
        type: array
        items:
          type: string
      groups:
        type: array
        items:
          type: string
  ArchitectureDiagram:
    type: object
    properties:
      draft:
        type: boolean
      schema:
        type: string
        description: The representation of the architecture diagram in Draw.io XML format encoded in Base64
  Question:
    type: object
    properties:
      ref:
        type: string
  ProductAsset:
    type: object
    properties:
      name:
        type: string
      desc:
        type: string
      identifier:
        type: string
      classification:
        type: object
        properties:
          name:
            type: string
          desc:
            type: string
          confidentiality:
            type: integer
          integrity:
            type: integer
          availability:
            type: integer
  ProductAccessType:
    type: object
    properties:
      name:
        type: string
      value:
        type: integer
  ProductTrustZone:
    type: object
    properties:
      name:
        type: string
      desc:
        type: string
      trustRating:
        type: integer
  ProductSetting:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  SecurityContentComponent:
    type: object
    properties:
      ref:
        type: string
        description: Unique identifier of the component definition
      name:
        type: string
        description: Name of the component definition
      desc:
        type: string
        description: Description of the component definition
      visible:
        type: boolean
        description: "Visibility of the component definition on the diagram. When false, the component will not be available on the diagram's palette but it will remain visible when already in use."
      category:
        type: object
        properties:
          ref:
            type: string
            description: Reference of the category of the component definition
          name:
            type: string
            description: Name of the category of the component definition
      riskPatterns:
        type: array
        items:
          $ref: '#/definitions/ComponentRiskPattern'
  ComponentRiskPattern:
    type: object
    properties:
      libraryRef:
        type: string
        description: Reference of the library containing the risk pattern
      ref:
        type: string
        description: Reference of the risk pattern
      name:
        type: string
        description: Name of the risk pattern
  Udt:
    type: object
    properties:
      ref:
        type: string
      value:
        type: string
    description: Custom field with reference and value
  Component:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      groupName:
        type: string
        description: This field always returns null. All group names have been transformed into tags.
      tags:
        type: array
        description: List of all tags
        items:
          type: string
      position:
        type: integer
      questions:
        type: array
        items:
          $ref: '#/definitions/Question'
      trustZones:
        type: array
        items:
          $ref: '#/definitions/ComponentTrustZone'
      assets:
        type: array
        items:
          $ref: '#/definitions/ComponentAsset'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/ComponentWeakness'
      controls:
        type: array
        items:
          $ref: '#/definitions/ComponentControl'
      usecases:
        type: array
        items:
          $ref: '#/definitions/ComponentUseCase'
  ComponentTrustZone:
    type: object
    properties:
      name:
        type: string
  ComponentAsset:
    type: object
    properties:
      name:
        type: string
      accessType:
        type: string
  ComponentWeakness:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      issueId:
        type: string
      issueLink:
        type: string
      state:
        type: integer
      impact:
        type: integer
      desc:
        type: string
      test:
        $ref: '#/definitions/Test'
  ComponentControl:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      issueId:
        type: string
      issueLink:
        type: string
      platform:
        type: string
      cost:
        type: integer
      risk:
        type: integer
      priority:
        type: string
      state:
        type: string
      owner:
        type: string
      desc:
        type: string
      source:
        type: string
      edited:
        type: boolean
      stateChangeSource:
        type: string
      mitigation:
        type: string
        description: This field will be included in threats and weaknesses that is where it belongs.
      library:
        type: string
        description: Reference of the Library
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'
      implementations:
        type: array
        items:
          $ref: '#/definitions/Implementation'
      threats:
        type: array
        items:
          $ref: '#/definitions/ThreatNameAndRef'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/WeaknessNameAndRef'
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      standards:
        type: array
        items:
          $ref: '#/definitions/Standard'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      test:
        $ref: '#/definitions/Test'
      settings:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerSetting'
  Test:
    type: object
    properties:
      expiryDate:
        type: string
      expiryPeriod:
        type: integer
      steps:
        type: string
      notes:
        type: string
      source:
        $ref: '#/definitions/TestSource'
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
  TestSource:
    type: object
    properties:
      filename:
        type: string
      args:
        type: string
      type:
        type: string
      result:
        type: string
      enabled:
        type: boolean
      timestamp:
        type: string
      output:
        type: string
  Reference:
    type: object
    properties:
      name:
        type: string
      url:
        type: string
  Standard:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
  Implementation:
    type: object
    properties:
      platform:
        type: string
      desc:
        type: string
  ThreatNameAndRef:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      mitigation:
        type: integer
  WeaknessNameAndRef:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      issueId:
        type: string
      issueLink:
        type: string
      mitigation:
        type: integer
  WeaknessNameRefAndMitigation:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      mitigation:
        type: integer
  ComponentUseCase:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      threats:
        type: array
        items:
          $ref: '#/definitions/Threat'
  ComponentUseCaseShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      threats:
        type: array
        items:
          $ref: '#/definitions/ThreatShort'
  ComponentUseCaseThreat:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      useCase:
        $ref: '#/definitions/UseCaseThreat'
  UseCaseThreat:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      threats:
        type: array
        items:
          $ref: '#/definitions/ThreatWeaknessControlWithName'
  ThreatShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      state:
        type: string
      owner:
        type: string
      desc:
        type: string
      source:
        type: string
      edited:
        type: boolean
      issueId:
        type: string
      issueLink:
        type: string
      riskRating:
        $ref: '#/definitions/RiskRating'
      inherentRisk:
        type: integer
      risk:
        type: integer
      projectedRisk:
        type: integer
      mitigation:
        type: integer
      library:
        type: string
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      settings:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerSetting'
  CreateProductThreat:
    type: object
    properties:
      ref:
        type: string
        description: Reference field value
      name:
        type: string
        description: Name field value
      desc:
        type: string
        description: Description field value
      riskRating:
        $ref: '#/definitions/RiskRating'
      expiryDate:
        type: string
        format: date
        description: Expiry date
      references:
        type: array
        description: List of references
        items:
          $ref: '#/definitions/Reference'
      udts:
        type: array
        description: Countermeasure custom fields
        items:
          $ref: '#/definitions/Udt'
  ProductThreat:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      state:
        type: string
      owner:
        type: string
      desc:
        type: string
      source:
        type: string
      edited:
        type: boolean
      issueId:
        type: string
      issueLink:
        type: string
      library:
        type: string
      riskRating:
        $ref: '#/definitions/RiskRating'
      inherentRisk:
        type: integer
      risk:
        type: integer
      projectedRisk:
        type: integer
      mitigation:
        type: integer
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/ThreatWeakness'
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControl'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      expiryDate:
        type: string
        format: date
        description: Expiry date
      settings:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerSetting'
  Threat:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      state:
        type: string
      owner:
        type: string
      desc:
        type: string
      source:
        type: string
      edited:
        type: boolean
      issueId:
        type: string
      issueLink:
        type: string
      riskRating:
        $ref: '#/definitions/RiskRating'
      inherentRisk:
        type: integer
      risk:
        type: integer
      projectedRisk:
        type: integer
      mitigation:
        type: integer
      library:
        type: string
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/ThreatWeakness'
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControl'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      settings:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerSetting'
  ThreatWeaknessControlWithName:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      state:
        type: string
      owner:
        type: string
      desc:
        type: string
      source:
        type: string
      edited:
        type: boolean
      issueId:
        type: string
      issueLink:
        type: string
      riskRating:
        $ref: '#/definitions/RiskRating'
      inherentRisk:
        type: integer
      risk:
        type: integer
      projectedRisk:
        type: integer
      mitigation:
        type: integer
      library:
        type: string
      references:
        type: array
        items:
          $ref: '#/definitions/Reference'
      weaknesses:
        type: array
        items:
          $ref: '#/definitions/ThreatWeaknessRefName'
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControlRefNameMitigation'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
      settings:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerSetting'
  ThreatWeakness:
    type: object
    properties:
      ref:
        type: string
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControl'
  ThreatWeaknessRefName:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      controls:
        type: array
        items:
          $ref: '#/definitions/ThreatControlRefNameMitigation'
  RiskRating:
    type: object
    properties:
      confidentiality:
        type: string
        description: Confidentiality
        enum:
        - none
        - low
        - medium
        - high
        - very-high
      integrity:
        type: string
        description: Integrity
        enum:
        - none
        - low
        - medium
        - high
        - very-high
      availability:
        type: string
        description: Availability
        enum:
        - none
        - low
        - medium
        - high
        - very-high
      easeOfExploitation:
        type: string
        description: Ease Of Exploitation
        enum:
        - none
        - low
        - medium
        - high
        - very-high
    description: Risk Rating
  RiskSummary:
    type: object
    properties:
      riskCount:
        $ref: '#/definitions/RiskCount'
      inherentRisk:
        type: number
      projectedRisk:
        type: number
      residualRisk:
        type: number
  RiskCount:
    type: object
    properties:
      mitigated:
        type: integer
      low:
        type: integer
      medium:
        type: integer
      high:
        type: integer
      critical:
        type: integer
  ThreatControl:
    type: object
    properties:
      ref:
        type: string
      mitigation:
        type: integer
  ThreatControlRefNameMitigation:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      mitigation:
        type: integer
  Error:
    type: object
    properties:
      status:
        type: string
      errors:
        type: array
        items:
          $ref: '#/definitions/Message'
  Message:
    type: object
    properties:
      message:
        type: string
  ControlCommand:
    type: object
    properties:
      ref:
        type: string
        description: Reference field value
      name:
        type: string
        description: Name field value
      desc:
        type: string
        description: Description field value
      test:
        $ref: '#/definitions/TestCommand'
      state:
        type: string
        description: Countermeasure state
        enum:
        - not-applicable
        - rejected
        - recommended
        - required
        - implemented
      costRating:
        type: string
        description: Countermeasure cost
        enum:
        - low
        - medium
        - high
      standards:
        type: array
        description: List of standards
        items:
          type: object
          properties:
            ref:
              type: string
              description: Reference of the Standard
            name:
              type: string
              description: Name of the Supported Standard
            supportedStandardRef:
              type: string
              description: Reference of the Supported Standard
  TestCommand:
    type: object
    properties:
      steps:
        type: string
        description: Test steps
      notes:
        type: string
        description: Test notes
    description: Test
  CreateCommentInCountermeasure:
    type: object
    properties:
      text:
        type: string
        description: Comment text
  CreateProductCountermeasure:
    type: object
    properties:
      ref:
        type: string
        description: Reference field value
      name:
        type: string
        description: Name field value
      desc:
        type: string
        description: Description field value
      platform:
        type: string
        description: Platform field value
      state:
        type: string
        description: Countermeasure state
        enum:
        - not-applicable
        - rejected
        - recommended
        - required
        - implemented
      costRating:
        type: string
        description: Countermeasure cost
        enum:
        - low
        - medium
        - high
      issueId:
        type: string
        description: The issue id in the issue tracker
      references:
        type: array
        description: List of references
        items:
          $ref: '#/definitions/Reference'
      standards:
        type: array
        description: List of standards
        items:
          type: object
          properties:
            ref:
              type: string
              description: Reference of the Standard
            name:
              type: string
              description: Name of the Supported Standard
            supportedStandardRef:
              type: string
              description: Reference of the Supported Standard
      udts:
        type: array
        description: Countermeasure custom fields
        items:
          $ref: '#/definitions/Udt'
      test:
        $ref: '#/definitions/CreateProductCountermeasureTest'
  CreateProductCountermeasureTest:
    type: object
    properties:
      steps:
        type: string
        description: Test steps
      notes:
        type: string
        description: Test notes
      expiryDate:
        type: string
        format: date
        description: Expiry date
      expiryPeriod:
        type: integer
        description: "Expiry period. Used to calculate the expiryDate, adding the number of days indicated by this value to date. This field is ignored if the field \"expiryDate\" has a value."
      source:
        $ref: '#/definitions/CreateProductCountermeasureTestSource'
      references:
        type: array
        description: List of References
        items:
          $ref: '#/definitions/Reference'
      udts:
        type: array
        description: Test custom fields
        items:
          $ref: '#/definitions/Udt'
    description: Test
  CreateProductCountermeasureTestSource:
    type: object
    properties:
      result:
        type: string
        description: Test result
        enum:
        - failed
        - error
        - not-tested
        - passed
        - not-applicable
        - partially-tested
      type:
        type: string
        description: Result source
        enum:
        - manual
        - jbehave
        - junit
        - script
        - zap
        - threadfix
        - cucumber
        - hp-fortify
  Group:
    type: object
    properties:
      ref:
        type: string
        description: Unique identifier of the group
      name:
        type: string
        description: Name of the group
      desc:
        type: string
        description: Description of the group
    description: Group
  filter:
    type: string
    description: |
      Filter to apply to the returned items. It is possible to filter by any property of the response.

      | Operator | Description | Example |
      | -------- | ----------- |-------- |
      | =        | Returns items where the property **equals** to the value | /resources?filter=**field=value** |
      | <>       | Returns items where the property is **not equal** to the value | /resources?filter=**field<>value** |
      | :AND:    | Returns items that comply with **both** filters | /resources?filter=**field1=value1:AND:field2<>value2** |
      | :OR:     | Returns items that comply with **any** filter | /resources?filter=**field1=value1:OR:field2<>value2** |

      ---
      \
      **AND** and **OR** operators can be combined. They can be grouped using parenthesis. Example:

      ```
      /resources?filter=(field1=value1:OR:field2=value2):AND:(field3<>value3:OR:field4=value4)
      ```
    example: field=value1:AND:field2=value2
  Event:
    type: object
    properties:
      timestamp:
        type: string
        format: date-time
        example: 2022-11-09T08:42:48.764+0100
        description: Timestamp of when the action was performed
      username:
        type: string
        example: admin
        description: user that trigger the event
      projectRef:
        type: string
        description: project over that occur the event
      eventTypeName:
        type: string
        example: User updated
        description: description of the event
      eventType:
        type: string
        example: USER_UPDATED
        description: type of the event triggered
      details:
        type: string
        example: bob
        description: extra information related to the event
    description: event
  User:
    type: object
    properties:
      username:
        type: string
        description: Username of the User
      firstName:
        type: string
        description: First Name of the User
      lastName:
        type: string
        description: Last Name of the User
      email:
        type: string
        description: Email of the User
      userGroups:
        type: array
        items:
          type: string
          description: Roles group
      userRoles:
        type: array
        items:
          type: string
          description: User roles
    description: User
  UserDetailed:
    type: object
    properties:
      username:
        type: string
        description: Username of the User
      firstName:
        type: string
        description: First Name of the User
      lastName:
        type: string
        description: Last Name of the User
      email:
        type: string
        description: Email of the User
      userGroups:
        type: array
        items:
          type: string
          description: Roles group
      userRoles:
        type: array
        items:
          type: string
          description: User roles
      apiToken:
        type: string
        description: Token to be able to make calls through the API
      passwordExpired:
        type: boolean
        description: Indicated if the password is expired
    description: User
  SupportedStandard:
    type: object
    properties:
      ref:
        type: string
        description: Unique identifier of the Supported Standard
      name:
        type: string
        description: Name of the Supported Standard
    description: Supported Standard
  CategoryComponent:
    type: object
    properties:
      ref:
        type: string
        description: Unique identifier of the Category of the Component
      name:
        type: string
        description: Name of the Category of the Component
    description: Category of the Component
  ComponentDefinition:
    type: object
    properties:
      ref:
        type: string
        description: Unique identifier of the Component Definition
      name:
        type: string
        description: Name of the Component Definition
      desc:
        type: string
        description: Description of the Component Definition
      categoryRef:
        type: string
        description: Reference of the category of the component
      riskPatterns:
        type: array
        items:
          type: object
          properties:
            ref:
              type: string
              description: Reference of the Risk Pattern
    description: Component Definition
  DataFlow:
    type: object
    properties:
      name:
        type: string
        description: Name of the DataFlow
      source:
        type: string
        description: Reference of the source Component
      target:
        type: string
        description: Reference of the target Component
      assets:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: Name of the Asset
    description: DataFlow
  VulnerabilitiesCreationResult:
    type: object
    properties:
      success:
        type: boolean
        description: indicates the status of the creation process
      checkUrl:
        type: string
        description: endpoint to check the state of creation process
      creationProcessId:
        type: string
        description: the ID of the creation process
      provider:
        type: string
        description: the provider used for creation process
    description: VulnerabilitiesCreationResult
  VulnerabilitiesCreationStatus:
    type: object
    properties:
      status:
        type: string
        description: "indicates the status of the creation process (PENDING, SUCCESS, FAILED)"
      creationProcessId:
        type: string
        description: the ID of the creation process
      vulnerabilityGroupId:
        type: string
        description: Vulnerability group ID
    description: VulnerabilitiesCreationStatus
  ThreatDetails:
    type: object
    properties:
      unique-id:
        type: string
      name:
        type: string
      desc:
        type: string
      mitigation:
        type: integer
      risk:
        type: integer
      inherentRisk:
        type: integer
      projectedRisk:
        type: integer
      riskRating:
        $ref: '#/definitions/RiskRating'
      use-case:
        $ref: '#/definitions/UseCaseShort'
      component:
        $ref: '#/definitions/ComponentShort'
      product:
        $ref: '#/definitions/ProductSmall'
      comments:
        type: array
        items:
          $ref: '#/definitions/Comment'
      controls:
        type: array
        items:
          $ref: '#/definitions/ControlShort'
      udts:
        type: array
        items:
          $ref: '#/definitions/Udt'
  UseCaseShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
  ComponentShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
  ProductSmall:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      revision:
        type: integer
        format: int32
        default: 1
      type:
        type: string
      status:
        type: string
      priority:
        type: integer
        format: int32
        default: 0
      tags:
        type: string
      workflowState:
        type: string
  ControlShort:
    type: object
    properties:
      ref:
        type: string
      name:
        type: string
      desc:
        type: string
      state:
        type: string
  IssuetrackerSetting:
    type: object
    properties:
      general:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerGeneralSetting'
      jira:
        $ref: '#/definitions/IssuetrackerJiraSetting'
  IssuetrackerGeneralSetting:
    type: object
    properties:
      name:
        type: string
      value:
        type: string
      canOverride:
        type: boolean
      type:
        type: string
      groupName:
        type: string
      position:
        type: integer
  IssuetrackerJiraSetting:
    type: object
    properties:
      url:
        type: string
      username:
        type: string
      password:
        type: string
      projectKey:
        type: string
      proxyUrl:
        type: string
      proxyUser:
        type: string
      proxyPassword:
        type: string
      issueType:
        type: string
      weaknessPriority:
        type: string
      countermeasurePriorityStrategy:
        type: string
      countermeasureManualPriorities:
        type: string
      openIssueState:
        type: string
      closedIssueResolutionState:
        type: string
      rejectedIssueResolutionState:
        type: string
      issueLinkTypeName:
        type: string
      fields:
        type: array
        items:
          $ref: '#/definitions/IssuetrackerJiraFieldSetting'
  IssuetrackerJiraFieldSetting:
    type: object
    properties:
      name:
        type: string
      defaultValue:
        type: string
      type:
        type: string
      required:
        type: boolean
  Comment:
    type: object
    properties:
      date:
        type: string
      user:
        type: string
      text:
        type: string
    description: Comment
  Rule:
    type: object
    properties:
      name:
        type: string
        description: The name of the rule
      libraryRef:
        type: string
        description: Reference of the library
      module:
        type: string
        description: The key that identifies the module
        enum:
        - common
        - main
        - component
        - threatComponent
        - threatDataflow
        - workflow
        - dataflow
  RulesSessionEvent:
    type: object
    properties:
      name:
        type: string
        description: Event type name
      description:
        type: string
        description: Human readable description of the event
      data:
        type: object
        description: Map containing additional data of the event
        additionalProperties:
          type: string
    description: Event describing the execution of a rule's action in a rule engine session
responses:
  BadRequest:
    description: Bad request
    schema:
      type: array
      items:
        $ref: '#/definitions/Error'
  Unauthorized:
    description: Authentication information is missing or invalid or not granted to perform this action.
    schema:
      type: array
      items:
        $ref: '#/definitions/Error'
  ForbiddenOperation:
    description: Forbidden operation
    schema:
      type: array
      items:
        $ref: '#/definitions/Error'
  NotFound:
    description: Item/s not found
    schema:
      type: array
      items:
        $ref: '#/definitions/Error'
  UnexpectedError:
    description: Unexpected error
    schema:
      type: array
      items:
        $ref: '#/definitions/Error'
  HealthUnexpectedError:
    description: Health unexpected error
    headers:
      Content-Type:
        type: string
        description: the original media type of the resource
      Transfer-Encoding:
        type: string
        description: the form of encoding used to safely transfer the payload body to the user.
      Connection:
        type: string
        description: status connection
